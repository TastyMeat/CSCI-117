// 1) nested if, nested case

local A B in 
    A = false

    if true then                    // expression in if-condition
        skip Browse A
    else
        if B then                   // elsif can be repeated 0 or more times
            skip Basic
        else                            // else is optional
            skip Basic
        end
    end

    case A of tree() then 
        skip Basic
    else 
        case A of false then 
            skip Basic     // nesting symbol is [] followed by record
        else 
            case A of true then 
                skip Basic
            else                            // else is optional
                skip Basic
            end
        end
    end
end


// 2) more expressions; note that applications of primitive binary operators
//    ==, <, >, +, -, *, mod must be enclosed in parentheses for hoz

local A in 
    A = 2
    local One IsOne in
        One = 1
        {Eq A One IsOne}
        if IsOne then               
            skip Basic
        end
    end
    
    local Three One Difference IsEqualToDifference in
        Three = 3
        One = 1
        {IntMinus Three One Difference}
        {Eq A Difference IsEqualToDifference}
        if IsEqualToDifference then            
            skip Browse A
        else
            skip Basic
        end
    end
end


// 3) "in" declaration 

local T X Y in             
    T = tree(1:3 2:T)
    local T in
        local A B in
            T = tree(1:A 2:B)
        end
        local One IsEqual in
            One = 1
            {Eq One One IsEqual}
            if IsEqual then
                local B Z in
                    local Five Two in
                        Five = 5
                        Two = 2
                        {IntMinus Five Two B}
                    end
                    skip Browse B
                end
            end
        end
    end
end


// 4) expressions in place of statements

local Fun R in
    Fun = proc {$ X Out}     
        Out = X        
    end
    
    {Fun 4 R}
    skip Browse R
end


// 5) Bind fun

local A B in
    skip Basic
    local Four Pattern in                    
        Four = 4
        Pattern = '#'(1:B 2:B)
        A = rdc(1:Four 2:B 3:Pattern)       
    end

    local Five Difference in                
        Five = 5
        local Three Four in
            Three = 3
            Four = 4
            {IntMinus Three Four Difference}
        end
        {IntPlus Five Difference B}
    end
    skip Browse A
    skip Browse B
    skip Store
end
