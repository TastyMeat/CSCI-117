[local ["A","B"] [A = false(),local ["EXU1"] [EXU1 = true(),if EXU1 then [skip/BA] else [local ["EXU1"] [EXU1 = B,if EXU1 then [skip] else [skip]]]],case A of tree() then [skip] else [case A of false() then [skip] else [case A of true() then [skip] else [skip]]]],local ["A"] [A = 2,local ["One","IsOne"] [One = 1,local ["EXU1","EXU2","EXU3"] [EXU1 = A,EXU2 = One,EXU3 = IsOne,"Eq" "EXU1" "EXU2" "EXU3"],local ["EXU1"] [EXU1 = IsOne,if EXU1 then [skip] else [skip]]],local ["Three","One","Difference","IsEqualToDifference"] [Three = 3,One = 1,local ["EXU1","EXU2","EXU3"] [EXU1 = Three,EXU2 = One,EXU3 = Difference,"IntMinus" "EXU1" "EXU2" "EXU3"],local ["EXU1","EXU2","EXU3"] [EXU1 = A,EXU2 = Difference,EXU3 = IsEqualToDifference,"Eq" "EXU1" "EXU2" "EXU3"],local ["EXU1"] [EXU1 = IsEqualToDifference,if EXU1 then [skip/BA] else [skip]]]],local ["T","X","Y"] [local ["EXU1","EXU2"] [EXU1 = 3,EXU2 = T,T = tree(1:EXU1 2:EXU2)],local ["T"] [local ["A","B"] [local ["EXU1","EXU2"] [EXU1 = A,EXU2 = B,T = tree(1:EXU1 2:EXU2)]],local ["One","IsEqual"] [One = 1,local ["EXU1","EXU2","EXU3"] [EXU1 = One,EXU2 = One,EXU3 = IsEqual,"Eq" "EXU1" "EXU2" "EXU3"],local ["EXU1"] [EXU1 = IsEqual,if EXU1 then [local ["B","Z"] [local ["Five","Two"] [Five = 5,Two = 2,local ["EXU1","EXU2","EXU3"] [EXU1 = Five,EXU2 = Two,EXU3 = B,"IntMinus" "EXU1" "EXU2" "EXU3"]],skip/BB]] else [skip]]]]],local ["Fun","R"] [Fun = proc {$ X Out} [Out = X],local ["EXU1","EXU2"] [EXU1 = 4,EXU2 = R,"Fun" "EXU1" "EXU2"],skip/BR],local ["A","B"] [skip,local ["Four","Pattern"] [Four = 4,local ["EXU1","EXU2"] [EXU1 = B,EXU2 = B,Pattern = '#'(1:EXU1 2:EXU2)],local ["EXU1","EXU2","EXU3"] [EXU1 = Four,EXU2 = B,EXU3 = Pattern,A = rdc(1:EXU1 2:EXU2 3:EXU3)]],local ["Five","Difference"] [Five = 5,local ["Three","Four"] [Three = 3,Four = 4,local ["EXU1","EXU2","EXU3"] [EXU1 = Three,EXU2 = Four,EXU3 = Difference,"IntMinus" "EXU1" "EXU2" "EXU3"]],local ["EXU1","EXU2","EXU3"] [EXU1 = Five,EXU2 = Difference,EXU3 = B,"IntPlus" "EXU1" "EXU2" "EXU3"]],skip/BA,skip/BB,skip/s]]