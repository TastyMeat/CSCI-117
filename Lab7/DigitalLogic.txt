local GateMaker AndG OrG NotG A B S IntToNeed Out MulPlex in 
        
  fun {GateMaker F}
     fun {$ Xs Ys} GateLoop T in
        fun {GateLoop Xs Ys}
           case Xs of nil then nil
                   [] '|'(1:X 2:Xr) then
                      case Ys of nil then nil
                              [] '|'(1:Y 2:Yr) then
                                  ({F X Y}|{GateLoop Xr Yr})
                      end
           end
        end
        T = thread {GateLoop Xs Ys} end   // thread isn't (yet) a returnable expression
	T
     end
  end

  fun {NotG Xs} NotLoop T in
     fun {NotLoop Xs}
        case Xs of nil then nil
                [] '|'(1:X 2:Xr) then ((1-X)|{NotLoop Xr})
        end
     end
     T = thread {NotLoop Xs} end          // thread isn't (yet) a returnable expression
     T
  end

AndG = {GateMaker fun {$ X Y} 
                     if (X == 0) then 0
                     elseif (Y == 0) then 0
                     else 1
                     end
                  end}
OrG =  {GateMaker fun {$ X Y}
                     if (X == 1) then 1
                     elseif (Y == 1) then 1
                     else 0
                     end
                  end}
        
fun {IntToNeed L}
   case L
      of nil then nil
      [] (X|Xs) then ByNeedValue in
         byNeed fun {$} X end ByNeedValue 
         (ByNeedValue|{IntToNeed Xs})
   end
end

fun {MulPlex A B S} SelectA SelectB in
   SelectA = {AndG {NotG S} A}
   SelectB = {AndG S B}
   {OrG SelectA SelectB}
end

A = {IntToNeed [0 1 1 0 0 1]}
B = {IntToNeed [1 1 1 0 1 0]}
S = [1 0 1 0 1 1]
Out = {MulPlex A B S}

  // run a loop so the MulPlex threads can finish before displaying Out
local Loop in
   proc {Loop X}
      if (X == 0) then skip Basic
      else {Loop (X-1)} end
   end
   {Loop 1000}
end

  skip Browse Out
  skip Full
end

//runFullT (Finite 3) "declarative threaded" "Lab7/DigitalLogic.txt" "Lab7/DigitalLogic.out"