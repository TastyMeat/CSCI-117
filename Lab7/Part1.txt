local Generate Zip X Y Z Times Merge GenerateHamming Take HammingSequence in

// Generate example from class
fun {Generate N} 
    fun {$} (N#{Generate (N+1)}) end
end

// Interleave example from class
fun {Zip X Y}
    fun {$} 
        (V#F) = {X} in
        (V#{Zip Y F})
    end
end

// Testing
X = {Generate 3}   // 3, 4, 5, ...
Y = {Generate 5}   // 5, 6, 7, ...
Z = {Zip X Y}      // 3, 5, 4, 6, 5, 7, ...
    local 
    (V1#F1) = {Z} 
    (V2#F2) = {F1} 
    (V3#F3) = {F2} 
    in
        skip Browse V1 // 3 from X
        skip Browse V2 // 5 from Y
        skip Browse V3 // 4 from X
end

fun {Times N Hs}
    fun {$}
        (H # Hr) = {Hs} 
        in
            ((N*H) # {Times N Hr})
    end
end

fun {Merge Xs Ys} 
    fun {$}
        (X#Xr) = {Xs} 
        (Y#Yr) = {Ys}
        in
            if (X < Y) then (X # {Merge Xr Ys})
            elseif (X > Y) then (Y # {Merge Xs Yr})
            else (X # {Merge Xr Yr})
            end
    end
end

fun {GenerateHamming Hs} 
    fun {$}
        (1 # {Merge {Times 2 Hs} {Merge {Times 3 Hs} {Times 5 Hs}}})
    end
end

fun {Take N Xs}
    if (N > 0) then
        (X # Xr) = {Xs} in
        (X | {Take (N - 1) Xr})
    else
        nil
    end
end

HammingSequence = {Take 10 {GenerateHamming {Generate 1}}}
skip Browse HammingSequence

end

//runFullT (Finite 3) "declarative threaded" "Lab7/Part1.txt" "Lab7/Part1.out"